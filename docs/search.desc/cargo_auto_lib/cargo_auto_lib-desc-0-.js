searchState.loadedDescShard("cargo_auto_lib", 0, "cargo_auto_lib\nANSI color\nRead data from Cargo.toml Read data from Cargo.toml\nTrait with methods to read data from Cargo.toml\nContains the error value\nANSI color\nContains the success value\nANSI color\nANSI color\nResult type with fixed LibError using thiserror\nShell command builder with simple but limited sanitizer\nTrait with methods for …\nsimilar to std::process::Output, but with i32 and Strings …\nANSI color\nthe main Cargo.toml is different for single project or for …\nAdd commit message to Unreleased in RELEASES.md\nReplace placeholders with the value\nReplace placeholders with the value\nJust like arg(), but for secrets that must be not echoed …\nJust like arg(), but for secrets that must be not echoed …\nfunctions to get data from Cargo.toml\nThis function includes data from Cargo.toml to markdown …\nincludes data from Cargo.toml to <code>md</code> files: version, …\nI want html pages to be correct microXML when I use them …\nchecks the correctness of micro XML files\ncopy all files from the folder into a module as strings …\ndeletes old js snippets when working with wasm-pack\ndeletes old js snippets when working with wasm-pack\nPretty HTML for docs\nmake HTML pretty\nFunctions to work with git from automation_tasks_rs\nvarious helper functions\nThis function inserts shield badges with lines_of_code …\nInsert shield badges with lines_of_code into README.rs\nFinds rs files with markers and include segments from md …\nFinds rs files with markers and include segments from md …\nprocess plantuml in current directory\nProcess plantuml for all md files\nIncludes the plantuml svg generated from the plantuml code\nIncludes the link to playground with the rust code in a …\nInclude the link to run code in Rust playground\nIncrement the minor version in Cargo.toml file only if …\nIncrement the minor version in Cargo.toml file even if …\nIncrement the patch version in Cargo.toml file only if …\nIncrement the patch version in Cargo.toml file even if …\nSemver utilities\nIf the major number is greater than 2000, it is a …\nNew version from date is written to Cargo.toml and …\nJust like auto_version_from_date(), but force the new …\nThe new version as date is written to Cargo.toml and …\nIncrement the version in Cargo.toml\nIncrement the version in Cargo.toml\nGet release text from RELEASES.md\nthe first Cargo.toml is maybe a workspace. It has a …\nprintln one, more or all sub_commands\nThe original <code>concat()</code> function does not have a delimiter\nCopy all files from the folder into a module as strings …\nCreate a new Version title in RELEASES.md\nError library for this crate using thiserror\nCheck if the code was run inside the Rust project root …\nfind from_pos\nreturn the position of end of the delimited data before …\nreturn the position of start of the delimited data after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHas git remote\nCheck if this folder is a local Git repository\nsync, check, create, push git tag\ngithub_owner from package.repository\ngithub_owner from package_repository\nHash text\nhome_dir() using the home crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTemplate for the shell command with placeholders\nTemplate for the shell command with placeholders\nInteractive ask to create a new local git repository\nUTC  date in iso standard like 2024-12-31\nthe package is read from the main Cargo.toml\nCargo.toml package authors as string without emails\nCargo.toml package authors as string without emails\nCargo.toml package authors as string\nCargo.toml package authors as string\nCargo.toml package description\nCargo.toml package repository\nCargo.toml package homepage\nCargo.toml package homepage\nCargo.toml package keywords\nCargo.toml package keywords\nCargo.toml package name\nCargo.toml package name\nCargo.toml package repository\nCargo.toml package repository\nCargo.toml package version\nCargo.toml package version\npublic_api_mod\nread Cargo.toml, for workspaces it is the Cargo.toml of …\nread Cargo.toml, for workspaces it is the Cargo.toml of …\nRun the sanitized command with no additional checks\nRun the sanitized command with no additional checks\nRun one shell command\nRun one shell command and return ShellOutput {exit_status, …\nRun one shell command with static str\nRun one shell command and return true if success\nThe status (exit code) of the process.\nThe string that the process wrote to stderr.\nThe string that the process wrote to stdout.\nTraverse dir and its sub-dir, but avoid excluded dirs.\nvarious utilities\nCargo.toml workspace members\nCargo.toml workspace members\nRead data from Cargo.toml\nremove email from author\nthe main Cargo.toml is different for single project or for …\nthe first Cargo.toml is maybe a workspace. It has a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthe package is read from the main Cargo.toml\nRegex for end marker\nRegex for start marker\nThis function includes data from Cargo.toml to markdown …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI want html pages to be correct microXML when I use them …\npanics if the microXML string is not correct\nCopy all files from the folder into a module as strings …\ndeletes old js snippets when working with wasm-pack\nPretty HTML for docs\nHas git remote\nCheck if this folder is a local Git repository\nInteractive ask to create a new local git repository\nReturn Url to repository: …\nFile contains releases changelog\nAdd commit message to Unreleased in RELEASES.md\nGet release text from RELEASES.md\nCreate a new Version title in RELEASES.md\nCreate RELEASES.md if file not exist\nsync, check, create, push git tag\nprintln one, more or all sub_commands\nCheck if the code was run inside the Rust project root …\nhome_dir() using the home crate panics if HOME not found\nStruct that contains 4 types of lines count: code, doc …\nThis function inserts shield badges with lines_of_code …\nReturns the counted lines of code\nall lines in examples files\nReturns the argument unchanged.\nIncludes (writes, modifies) the shield badge code into …\nCalls <code>U::from(self)</code>.\nlines with code in srs files\nlines with comments in srs files\nlines with doc_comments in srs files\nunit plus integration tests\nReturns a string with the markdown code for 4 shield …\nMarkers found in md files\nRegex for end marker\nRegex for start marker\nRegex for end marker\nRegex for start marker\nMarkers found in rs files\nFinds rs files with markers and include segments from md …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe first time it is called read the file and extracts all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmarkers in rs files\nAll rs files in src, tests and examples folders.\nCapture group for image link\nRegex for end marker\nRegex for start marker\nIncludes the plantuml svg generated from the plantuml code.\nProcess plantuml for all md files\nDeflate and strange base64, that is Url_safe\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest svg from plantuml server\nCapture the link in markdown style name\nInclude the link to run code in Rust playground\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum for version parts: Minor or Patch\nIncrement the minor version in Cargo.toml file only if …\nIncrement the minor version in Cargo.toml file even if …\nIncrement the patch version in Cargo.toml file only if …\nIncrement the patch version in Cargo.toml file even if …\nReturns the argument unchanged.\nIncrement a part of version in Cargo.toml file even if …\nCalls <code>U::from(self)</code>.\nParse next number in version\nIncrement the version in Cargo.toml\nIncrement the version in Cargo.toml\nShell command builder with simple but limited sanitizer\nsimilar to std::process::Output, but with i32 and Strings …\nRun one shell command\nRun one shell command and return ShellOutput {exit_status, …\nRun one shell command with static str\nRun one shell command and return true if success\nThe status (exit code) of the process.\nThe string that the process wrote to stderr.\nThe string that the process wrote to stdout.\nThe struct that represents the file …\nFile metadata\nIf files are added or deleted, other files must be also …\nNew version from date is written to Cargo.toml and …\nJust like auto_version_from_date(), but force the new …\nInternal function to get version from date\nCargo.toml is now different and needs to be changed in the …\nHash of file content\nFilename with path from Cargo.toml folder\nFind from position in string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for file service_worker.js and modify version\nMake a vector of file metadata\nRead .automation_tasks_rs_file_hashes.json\nSave the new file metadata\nCalculate the hash for the content of a file\nVector of file metadata\nConvert a date to a version\nWrite version to Cargo.toml\nContains the error value\nEnum of possible errors from this library\nContains the success value\nResult type alias with fixed LibError using thiserror\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nANSI color\nRead data from Cargo.toml\nTrait with methods to read data from Cargo.toml\nANSI color\nANSI color\nANSI color\nResult type with fixed LibError using thiserror\nShell command builder with simple but limited sanitizer\nTrait with methods for …\nsimilar to std::process::Output, but with i32 and Strings …\nANSI color\nAdd commit message to Unreleased in RELEASES.md\nReplace placeholders with the value\nJust like arg(), but for secrets that must be not echoed …\nThis function includes data from Cargo.toml to markdown …\nI want html pages to be correct microXML when I use them …\ndeletes old js snippets when working with wasm-pack\nPretty HTML for docs\nThis function inserts shield badges with lines_of_code …\nFinds rs files with markers and include segments from md …\nprocess plantuml in current directory\nProcess plantuml for all md files\nInclude the link to run code in Rust playground\nIncrement the minor version in Cargo.toml file only if …\nIncrement the minor version in Cargo.toml file even if …\nIncrement the patch version in Cargo.toml file only if …\nIncrement the patch version in Cargo.toml file even if …\nNew version from date is written to Cargo.toml and …\nJust like auto_version_from_date(), but force the new …\nIncrement the version in Cargo.toml\nIncrement the version in Cargo.toml\nGet release text from RELEASES.md\nprintln one, more or all sub_commands\nThe original <code>concat()</code> function does not have a delimiter\nCopy all files from the folder into a module as strings …\nCreate a new Version title in RELEASES.md\nCheck if the code was run inside the Rust project root …\nfind from_pos\nreturn the position of end of the delimited data before …\nreturn the position of start of the delimited data after …\nHas git remote\nCheck if this folder is a local Git repository\nsync, check, create, push git tag\ngithub_owner from package.repository\nHash text\nhome_dir() using the home crate.\nTemplate for the shell command with placeholders\nInteractive ask to create a new local git repository\nUTC  date in iso standard like 2024-12-31\nCargo.toml package authors as string without emails\nCargo.toml package authors as string\nCargo.toml package description\nCargo.toml package homepage\nCargo.toml package keywords\nCargo.toml package name\nCargo.toml package repository\nCargo.toml package version\nread Cargo.toml, for workspaces it is the Cargo.toml of …\nRun the sanitized command with no additional checks\nRun one shell command\nRun one shell command and return ShellOutput {exit_status, …\nRun one shell command with static str\nRun one shell command and return true if success\nTraverse dir and its sub-dir, but avoid excluded dirs.\nCargo.toml workspace members\nThe original <code>concat()</code> function does not have a delimiter\nFind from pos\nPosition of end of the delimited data before the delimiter\nPosition of start of the delimited data after the delimiter\nUTC date in iso standard like 2024-12-31\nTraverse dir and its sub-dir, but avoid excluded dirs.")